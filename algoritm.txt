классы:
MainClass - Основной класс, содержит pointers на Servers, собирает проект в целое
Logger - статик класс записывает логи в папку logs
ConfParser - статик класс. Парсит конфиг файл.
Servers - обычный класс. Содержит map <sockFd, class Server> обозначающий все коннекты.
Server  - обычный класс. содержит данные о хосте/порте/запрос/ответ/принадлежность к cgi
Stage - поле внутри класса Server, показывающий текущий статус обработки запроса.
                        // 0-9 - чтение запроса
                            // 0 - только создан
                            // 1 - закончил с предыдущим
                            // 2 - не влез в buf
                            // 3 - chunked запрос, ожидаем очередной chunk
                        // 10-19 - отправка ответа
                            //10 - первичная отправка
                            //11 - отправка очередного чанка
                            //12 - доотправка (не все отправилось в предыдущий раз)
                        // 20-29 - работа с CGI
                            //20 - первичная работа с CGI(pipe создан нужно отправить в него запрос)
                            //21 - форк + запуск скрипта
                            //22 - ожидаем ответ скрипта(+ таймер на досрочный выход)
                        // 30-39 - обработка запроса
                            //подготовка ответа

алгоритм:
1. Парсим конфиг файл, создаем слушающие фд для кождого хоста:порта записываем в Servers::map
    пары fd + объект класса Server. Для каждого сервера выделяем память 
    из кучи внутри Servers и чистим в деструкторе.
    Для каждого Server * создаем список t_serv отвечающий за конфиг сервера с именем.
    Для каждого листа в списке t_serv создаем список t_loc отвечающий за параметры location.

2. Запускаем mainloop
    2.0 чистим readset и writeset
    2.1 в зависимости от stage добавляем fd в readset/writeset
        2.1.1 идем по всем используемым подключениям проверяем stage
            2.1.1.1 stage 0/1/2/3 - добавляем fdKey в readset
                    stage 10/11/12 - добавляем fdKey в writeset
                    stage 20 - добавляем fdPipeOut в writeset
                    stage 21 - ???
                    stage 22 - добавляем fdPipeIN в readset
                    stage 30-39 - ???
            2.1.1.2 Считаем maxFd
        2.1.2 идем по всем слушающим fd и добавляем в readset, проверяем не нужно ли поменять maxFd
    2.2 идем циклом по слушающим fd:
        2.2.1 если в readset - добавляем подключение + клонируем server
    2.3 идем циклом по используемым fd:
        2.3.1 если fdKey в readset:
            2.3.1.1 если resRecv == -1 проверяем stage:
                        // 0-19/30-39 - Закрываем connection
                        // 20-29 - убиваем дочерний процесс и Закрываем connection
            2.3.1.2 если resRecv == 0 проверяем stage:
                        // 0/1/3 - Закрываем connection
                        // 2 - переходим к обработке запроса
                        // 20-39 - ???
            2.3.1.3 если resRecv > 0 проверяем stage:
                        // 0/1/2 - читаем запрос дописываем к стринге запроса
                        // 3 - дописываем в структуру запроса в body
                        // 3 - если чанк последний (==0) или не было чанков - переходим к обработке запроса
                        // 20-39 - ???
        2.3.2 если fdPipeIN в readset смотрим stage
                        // 22 - записываем ответ
        2.3.3 если fdKey в writeset:
            2.3.3.1 отправляем и проверяем результат
            2.3.3.2 <0 - close connection
            2.3.3.3 <len - ресайз ответа
            2.3.3.4 выствляем stage 1;
        2.3.4 если fdPipeOut в writeset смотрим stage, если есть что отправить - отправляем