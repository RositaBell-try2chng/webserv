классы:
MainClass - Основной класс, содержит pointers на Servers, собирает проект в целое
Logger - статик класс записывает логи в папку logs
ConfParser - статик класс. Парсит конфиг файл.
Servers - обычный класс. Содержит map <sockFd, class Server> обозначающий все коннекты.
Server  - обычный класс. содержит данные о хосте/порте/запрос/ответ/принадлежность к cgi
Stage - поле внутри класса Server, показывающий текущий статус обработки запроса.

Stage:
    0 - старт обработки
    1 - read
    2 - parse
    3 - handle
    4 - CGI
    5 - write
    9 - error
readStage:
    0 - новое чтение
    1 - читаем чанки fix me: need???
parseStage:
    0 - start
    1 - start string ready
    2 - headers ready
    3 - body full
    9 - error
CGIStage:
    0 - start
    1 - send to pipe PipeOutForward
    2 - last send to PipeOutForward
        20 - not all sent
    3 - fork + launch script
    4 - wait end of pid
    5 - read from PipeInBack
        50 - read next chunk from PipeInBack
    6 - end of pipe reached
    9 - CGIerror
writeStage:
    0 - новая запись
    1 - досылаем чанк
    2 - шлем последний чанк


алгоритм:
1. Парсим конфиг файл, создаем слушающие фд для кождого хоста:порта записываем в Servers::map
    пары fd + объект класса Server. Для каждого сервера выделяем память 
    из кучи внутри Servers и чистим в деструкторе.
    Для каждого Server * создаем список t_serv отвечающий за конфиг сервера с именем.
    Для каждого листа в списке t_serv создаем список t_loc отвечающий за параметры location.

2. Запускаем mainloop
    2.0 чистим readset и writeset
    2.1 идем по всем Server*, доводим их до Stage чтения / записи / ожидания для CGI
    2.2 добавляем в readFds/writeFds fd сокета или пайпа в зависимости от stage
    2.3 добавляем слушающие сокеты в readFds
SELECT
    2.4 идем циклом по слушающим fd - > accept connection
    2.5 идем циклом по всем Server* в зависимости от stage делаем:
        //1 - читаем из сокета + Stage = 2
        //4 - В зависимости от SGIStage:
            //1,2,20 - посылаем body в PipeOutForward
            //5, 50 - читаем из PipeInBack
        //5 - посылаем ответ на сокет

